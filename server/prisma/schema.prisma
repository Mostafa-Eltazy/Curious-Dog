// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  username          String         @unique
  profilePicture    String?        @map("profile_picture")
  askedQuestions    Question[]     @relation("AskedQuestions")
  receivedQuestions Question[]     @relation("ReceivedQuestions")
  likedQuestions    QuestionLike[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@map("users")
}

model Question {
  id          Int            @id @default(autoincrement())
  body        String         @db.VarChar(600)
  answer      String?        @db.VarChar(600)
  isAnonymous Boolean        @default(true) @map("is_anonymous")
  askerId     Int?           @map("asker_id")
  asker       User?          @relation("AskedQuestions", fields: [askerId], references: [id])
  receiverId  Int            @map("receiver_id")
  receiver    User           @relation("ReceivedQuestions", fields: [receiverId], references: [id])
  likes       QuestionLike[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@map("questions")
}

model QuestionLike {
  questionId Int      @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // composite key
  @@id([questionId, userId])
  @@map("question_likes")
}
